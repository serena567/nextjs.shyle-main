/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { IsAdminService } from "../isAdmin.service";
import { IsAdminCreateInput } from "./IsAdminCreateInput";
import { IsAdmin } from "./IsAdmin";
import { IsAdminFindManyArgs } from "./IsAdminFindManyArgs";
import { IsAdminWhereUniqueInput } from "./IsAdminWhereUniqueInput";
import { IsAdminUpdateInput } from "./IsAdminUpdateInput";

export class IsAdminControllerBase {
  constructor(protected readonly service: IsAdminService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: IsAdmin })
  async createIsAdmin(
    @common.Body() data: IsAdminCreateInput
  ): Promise<IsAdmin> {
    return await this.service.createIsAdmin({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [IsAdmin] })
  @ApiNestedQuery(IsAdminFindManyArgs)
  async isAdmins(@common.Req() request: Request): Promise<IsAdmin[]> {
    const args = plainToClass(IsAdminFindManyArgs, request.query);
    return this.service.isAdmins({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: IsAdmin })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async isAdmin(
    @common.Param() params: IsAdminWhereUniqueInput
  ): Promise<IsAdmin | null> {
    const result = await this.service.isAdmin({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: IsAdmin })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateIsAdmin(
    @common.Param() params: IsAdminWhereUniqueInput,
    @common.Body() data: IsAdminUpdateInput
  ): Promise<IsAdmin | null> {
    try {
      return await this.service.updateIsAdmin({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: IsAdmin })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteIsAdmin(
    @common.Param() params: IsAdminWhereUniqueInput
  ): Promise<IsAdmin | null> {
    try {
      return await this.service.deleteIsAdmin({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
